x1<- matrix(1:9,ncol = 3,nrow =3)
x1
solve(x1)
x1<- matrix(1:12,ncol = 4,nrow =3)
solve(x1)
x1<- matrix(1:16,ncol = 4,nrow =3)
x1<- matrix(1:16,ncol = 4,nrow =4)
solve(x1)
traceback()
x1<- matrix(runif(16),ncol = 4,nrow =4)
solve(x1)
x1
x1<- matrix(runif(625),ncol = 25,nrow =25)
solve(x1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## variable inv holds the inverse matrix object
inv <- null
## function to reset the matrix
set <- function(y) {
x <<- y
inv <- null
}
get <- function() x
setInv <- function(invert) inv <<- invert
getInv <- function() inv
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getmean()
if(!is.null(inv)) {
print("getting cache data")
return(m)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
chacheSolve(x1)
cacheSolve(x1)
cacheSolve()
cacheSolve(x1)
traceback()
x1$getmean()
class(x1)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## variable inv holds the inverse matrix object
inv <- null
## function to reset the matrix
set <- function(y) {
x <<- y
inv <- null
}
get <- function() x
setInv <- function(invert) inv <<- invert
getInv <- function() inv
matrix(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getmean()
if(!is.null(inv)) {
print("getting cache data")
return(m)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(x1)
x1<- matrix(runif(16),ncol = 4,nrow =4)
cacheSolve(x1)
makeCacheMatrix(x1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## variable inv holds the inverse matrix object
inv <- NULL
## function to reset the matrix
set <- function(y) {
x <<- y
inv <- NULL
}
get <- function() x
setInv <- function(invert) inv <<- invert
getInv <- function() inv
matrix(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getmean()
if(!is.null(inv)) {
print("getting cache data")
return(m)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x1<- matrix(runif(16),ncol = 4,nrow =4)
cacheSolve(x1)
makeCacheMatrix(x1)
cacheSolve(x1)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x<-1:10
cachemean(x)
makeCacheMatrix(x1)
x<-makeCacheMatrix(x1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## variable inv holds the inverse matrix object
inv <- NULL
## function to reset the matrix
set <- function(y) {
x <<- y
inv <- NULL
}
get <- function() x
setInv <- function(invert) inv <<- invert
getInv <- function() inv
matrix(set = set, get = get,
setInv = setinv,
getInv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getmean()
if(!is.null(inv)) {
print("getting cache data")
return(m)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
y<-makeCacheMatrix(x1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## variable inv holds the inverse matrix object
inv <- NULL
## function to reset the matrix
set <- function(y) {
x <<- y
inv <- NULL
}
get <- function() x
setInv <- function(invert) inv <<- invert
getInv <- function() inv
matrix(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getmean()
if(!is.null(inv)) {
print("getting cache data")
return(m)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
y<-makeCacheMatrix(x1)
z <- makeVector(x)
cachemean(z)
z <- matrix(c(4,2,7,6), nrow = 2, ncol = 2)
x<-makeCacheMatrix(z)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## variable inv holds the inverse matrix object
inv <- NULL
## function to reset the matrix
set <- function(y) {
x <<- y
inv <- NULL
}
get <- function() x
setinv <- function(invert) inv <<- invert
getinv <- function() inv
matrix(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getmean()
if(!is.null(inv)) {
print("getting cache data")
return(m)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x<-makeCacheMatrix(z)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## variable inv holds the inverse matrix object
inv <- NULL
## function to reset the matrix
set <- function(y) {
x <<- y
inv <- NULL
}
get <- function() x
setinv <- function(invert) inv <<- invert
getinv <- function() inv
matrix(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getmean()
if(!is.null(inv)) {
print("getting cache data")
return(m)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x<-makeCacheMatrix(z)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## variable inv holds the inverse matrix object
inv <- NULL
## function to reset the matrix
set <- function(y) {
x <<- y
inv <- NULL
}
get <- function() x
setinv <- function(invert) inv <<- invert
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getmean()
if(!is.null(inv)) {
print("getting cache data")
return(m)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x<-makeCacheMatrix(z)
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## variable inv holds the inverse matrix object
inv <- NULL
## function to reset the matrix
set <- function(y) {
x <<- y
inv <- NULL
}
get <- function() x
setinv <- function(invert) inv <<- invert
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getmean()
if(!is.null(inv)) {
print("getting cache data")
return(m)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x<-makeCacheMatrix(z)
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## variable inv holds the inverse matrix object
inv <- NULL
## function to reset the matrix
set <- function(y) {
x <<- y
inv <- NULL
}
get <- function() x
setinv <- function(invert) inv <<- invert
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
print("getting cache data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x<-makeCacheMatrix(z)
cacheSolve(x)
